select(qseqid, sseqid) %>%
separate(sseqid, into = c("genus", NA, NA, NA))
genus_final <- genus_final %>%
mutate(genus = case_when(
qseqid %in% family_enterobacteriaceae ~ "Enterobacteriaceae",
qseqid %in% family_hafniaceae ~ "Hafniaceae",
qseqid %in% family_pectobacteriaceae ~ "Pectobacteriaeceae",
qseqid %in% family_micrococcaceae ~ "Micrococcaeae",
qseqid %in% order_enterobacterales ~ "Enterobacterales",
qseqid %in% family_erwiniaceae ~ "Erwiniaceae",
qseqid %in% family_caryophanaceae ~ "Caryophanaceae",
qseqid %in% family_yersiniaceae ~ "Yersiniaceae",
.default = genus
))
View(blast_results_mult)
View(genus)
View(blast_results_mult)
## ----------------------Packages-----------------------------------------------
#   Loading packages
library(tidyverse); library(dplyr); library(reshape2)
genus <- read.csv("data/raw/blast_results.csv", header = FALSE)
colnames(genus) <- c("qseqid", "sseqid", "qlen", "slen", "qstart", "qend",
"length", "mismatch", "gapopen", "gaps", "evalue", "bitscore",
"pident", "nident", "sseq")
genus_filt <- genus %>%
mutate(align_length = length/qlen) %>%
filter(align_length > 0.99)
mult_genera <- genus_filt %>%
separate(sseqid, into = c("genus", NA, NA, NA)) %>%
group_by(qseqid, genus) %>%
arrange(desc(pident)) %>%
slice(1) %>%
select(qseqid, genus, pident, nident) %>%
group_by(qseqid) %>%
summarize(obs = n()) %>%
filter(obs > 1)
mult_genera_exp <- genus_filt %>%
separate(sseqid, into = c("genus", NA, NA, NA)) %>%
group_by(qseqid, genus) %>%
arrange(desc(pident)) %>%
slice(1) %>%
ungroup() %>%
select(qseqid, genus, pident, nident) %>%
filter(qseqid %in% mult_genera$qseqid) %>%
group_by(qseqid) %>%
arrange(desc(pident)) %>%
mutate(diff_pident = pident[1] - pident)%>%
mutate(diff_nident = nident[1] - nident)%>%
ungroup()
isolates_to_check <- mult_genera_exp %>%
filter(diff_pident <= 0.5) %>%
filter(duplicated(qseqid))
blast_results_mult <- genus_filt %>%
filter(qseqid %in% isolates_to_check$qseqid) %>%
group_by(qseqid) %>%
arrange(desc(pident)) %>%
mutate(diff_pident = pident[1] - pident,
diff_nident = nident[1] - nident)%>%
filter(diff_pident <= 0.5) %>%
ungroup()
#0.25%
family_enterobacteriaceae <- c("s12-0427", "s12-0468", "s12-0679", "s12-0762",
"s12-0949", "s12-0961", "s12-1177", "s12-1178",
"s12-1189", "s12-1195", "s12-1198",
"s12-1325", "s12-1406", "s12-1477", "s12-1478",
"s12-1911", "s12-2033", "s12-2511", "s12-2670")
family_enterobacteriaceae <- c("s12-0468", "s12-0679", "s12-0762", "s12-0949",
"s12-0961", "s12-1477", "s12-1478", "s12-1479",
"s12-1480", "s12-1513", "s12-1528", "s12-1529",
"s12-1890", "s12-1911", "s12-2001", "s12-2051",
"s12-2064", "s12-2066", "s12-2099", "s12-2191",
"s12-2193", "s12-2194")
family_hafniaceae <- c("s12-0940", "s12-0983", "s12-1103")
family_pectobacteriaceae <- c("s12-1306")
family_erwiniaceae <- c("s12-0457", "s12-0459", "s12-0469",
"s12-0479", "s12-0481", "s12-0673", "s12-1129",
"s12-2622")
family_micrococcaceae <- c("s12-2225")
family_caryophanaceae <- c("s12-0958")
family_yersiniaceae <- c("s12-2451")
order_enterobacterales <- c("s12-0339", "s12-0427", "s12-0811", "s12-1173",
"s12-1177", "s12-1178", "s12-1186", "s12-1189",
"s12-1194", "s12-1195", "s12-1196", "s12-1197",
"s12-1198", "s12-1215", "s12-1223", "s12-1317",
"s12-1318", "s12-1319", "s12-1320", "s12-1325",
"s12-1326", "s12-1327", "s12-1328", "s12-1334",
"s12-1335", "s12-1336", "s12-1392", "s12-1395",
"s12-1406", "s12-1525", "s12-1526", "s12-1579",
"s12-1631", "s12-1690", "s12-1969", "s12-1973",
"s12-2030", "s12-2033", "s12-2054", "s12-2405",
"s12-2411", "s12-2464", "s12-2498", "s12-2551",
"s12-2652", "s12-2663", "s12-2670")
genus_final <- genus_filt %>%
group_by(qseqid) %>%
arrange(desc(pident)) %>%
slice(1) %>%
select(qseqid, sseqid) %>%
separate(sseqid, into = c("genus", NA, NA, NA))
genus_final <- genus_final %>%
mutate(genus = case_when(
qseqid %in% family_enterobacteriaceae ~ "Enterobacteriaceae",
qseqid %in% family_hafniaceae ~ "Hafniaceae",
qseqid %in% family_pectobacteriaceae ~ "Pectobacteriaeceae",
qseqid %in% family_micrococcaceae ~ "Micrococcaeae",
qseqid %in% order_enterobacterales ~ "Enterobacterales",
qseqid %in% family_erwiniaceae ~ "Erwiniaceae",
qseqid %in% family_caryophanaceae ~ "Caryophanaceae",
qseqid %in% family_yersiniaceae ~ "Yersiniaceae",
.default = genus
))
write.csv(genus_final, "data/wrangled/genus_assignments.csv", row.names = FALSE)
## ----------------------Packages-----------------------------------------------
#   Loading packages
library(tidyverse); library(dplyr); library(reshape2); library(vegan); library(ggpubr);
library(phyloseq); library(microbiomeMarker);
genus_data <- read.csv("data/wrangled/genus_assignments.csv", header = TRUE)
fmt <- read.csv("data/raw/fmt_sheet.csv", header = TRUE)
location <- read.csv("data/raw/sample_location_of_origin.csv", header = TRUE)
tax_key <- read.csv("data/raw/tax_key.csv", header =TRUE)
## ----------------------Wrangling----------------------------------------------
#Assigning the previous ID to the isolate
genus_data$isolate <- paste0("FSL ", toupper(genus_data$qseqid))
fmt$FSL <- toupper(fmt$FSL)
data <- merge(genus_data, fmt, by.x = "isolate", by.y = "FSL", all = TRUE)
table(is.na(data$genus))
failed_seq <- data %>%
select(isolate, genus, Previous.ID) %>%
filter(is.na(genus))
data <- data %>%
select(isolate, genus, Previous.ID) %>%
filter(!is.na(genus))
failed_seq_not_frozen <- data %>%
select(isolate, genus, Previous.ID) %>%
filter(is.na(genus))
## ----------------------Wrangling----------------------------------------------
#Assigning the previous ID to the isolate
genus_data$isolate <- paste0("FSL ", toupper(genus_data$qseqid))
fmt$FSL <- toupper(fmt$FSL)
data <- merge(genus_data, fmt, by.x = "isolate", by.y = "FSL", all = TRUE)
table(is.na(data$genus))
failed_seq_not_frozen <- data %>%
select(isolate, genus, Previous.ID) %>%
filter(is.na(genus))
data <- data %>%
select(isolate, genus, Previous.ID) %>%
filter(!is.na(genus))
colnames(data)[3] <- "previous_id"
data <- separate(data, previous_id,
into = c("sampling_code", "sample", "sample_rep", "test", "plate_rep", "isolate_number", "mixed_culture_no"),
sep = "-")
data$sampling_code_sample <- paste0(data$sampling_code, "_", data$sample)
pattern <- c("0522B_D22", "0522C_D22", "0622A_D22")
data$sample <- ifelse(data$sampling_code_sample %in% pattern, "D28", data$sample)
data$sampling_code_sample <- paste0(data$sampling_code, "_", data$sample)
data$sampling_code_sample_test <- paste0(data$sampling_code, "_", data$sample, "_", data$test)
#Adding locations to samples
location$sampling_code <- gsub("_", "", location$sampling_code)
loc_h <- filter(location, sample_type != "f")
loc_f <- filter(location, sample_type != "r")
for(i in 1:nrow(data)){
if(data$sample[i] == "H"){
index_h <- which(data$sampling_code[i] == loc_h$sampling_code)
data$loc[i] <- loc_h$location[index_h]
} else {
index_f <- which(data$sampling_code[i] == loc_f$sampling_code)
data$loc[i] <- loc_f$location[index_f]
}
}
#H sample, 0722_B
#Shelf life sample, 0922_B
#H sample, 1222A APC and GN only
#Shelf life sample, 0722_B D7 samples -> Not received, wrong isolates frozen down as belonging to this sample
sample_error <- c("0722B_H_APC", "0722B_H_PC", "0722B_H_GN", "0922B_D7_APC",
"0922B_D7_PC", "0922B_D7_GN", "0922B_D22_APC", "0922B_D22_GN",
"0922B_D22_PC", "1222A_H_APC", "1222A_H_GN",
"0722B_D7_APC", "0722B_D7_GN", "0722B_D7_PC")
data_filt <- data %>%
filter(!(sampling_code_sample_test %in% sample_error))
data_removed <- data %>%
filter(sampling_code_sample_test %in% sample_error)
View(data_removed)
#Removing 79 isolates that could not be classified at the genus-level
table((data_filt$genus %in% c("Enterobacteriaceae", "Hafniaceae",
"Pectobacteriaeceae", "Micrococcaeae",
"Enterobacterales", "Erwiniaceae",
"Caryophanaceae", "Yersiniaceae")))
n_genus <- data_filt %>%
filter(genus %in% c("Enterobacteriaceae", "Hafniaceae",
"Pectobacteriaeceae", "Micrococcaeae",
"Enterobacterales", "Erwiniaceae",
"Caryophanaceae", "Yersiniaceae"))
data_filt <- data_filt %>%
filter(!(genus %in% c("Enterobacteriaceae", "Hafniaceae",
"Pectobacteriaeceae", "Micrococcaeae",
"Enterobacterales", "Erwiniaceae",
"Caryophanaceae", "Yersiniaceae")))
genera_prop <- data_filt %>%
group_by(genus) %>%
summarize(prop = n()/nrow(data_filt),
count = n()) %>%
mutate(percent = prop*100)
genera_high_freq <- genera_prop %>%
filter(percent > 1)
data_filt$genus_high_freq <- ifelse(data_filt$genus %in% genera_high_freq$genus,
data_filt$genus,
"rare")
data_filt_summary_loc <- data_filt %>%
group_by(loc) %>%
summarize(n = n())
data_filt_summary_samp <- data_filt %>%
group_by(sample) %>%
summarize(n = n())
data_filt_summary_genus <- data_filt %>%
group_by(genus_high_freq) %>%
summarize(n = n())
data_filt_summary_loc_genus <- data_filt %>%
group_by(loc, genus_high_freq) %>%
summarize(n = n())
data_filt_summary_loc_samp_num_isolates <- data_filt %>%
group_by(loc, sample, genus_high_freq) %>%
summarize(n = n())
data_filt_summary_samp_genera <- data_filt %>%
group_by(sample, genus_high_freq) %>%
summarize(n = n())
chisq.test(data_filt$loc, data_filt$genus_high_freq, simulate.p.value = TRUE)$expected
fisher.test(data_filt$loc, data_filt$genus_high_freq, simulate.p.value = TRUE)
fisher.test(data_filt$sample, data_filt$genus_high_freq, simulate.p.value = TRUE)
#Samples tested every 7 days
seven_days <- c("0422B", "0522A", "0522B", "0522C", "0622A")
data_filt_2 <- data_filt %>%
filter(!(sampling_code %in% seven_days & sample == "D28")) %>%
filter(!(loc %in% c("FL", "GA")))
dist_data <- select(data_filt_2, c("genus_high_freq", "sampling_code_sample", "test"))
genus_by_sample <- melt(dist_data, id.vars = c("sampling_code_sample", "genus_high_freq"))
com_mat <- dcast(genus_by_sample, sampling_code_sample ~ genus_high_freq, fun.aggregate = length)
com_mat_met <- separate(com_mat, sampling_code_sample, into = c("sampling_code", "sample"), sep = "_") %>%
select(sampling_code, sample)
row.names(com_mat_met) <- 1:nrow(com_mat_met)
for(i in 1:nrow(com_mat_met)){
if(com_mat_met$sample[i] == "H"){
index_h <- which(com_mat_met$sampling_code[i] == loc_h$sampling_code)
com_mat_met$loc[i] <- loc_h$location[index_h]
} else {
index_f <- which(com_mat_met$sampling_code[i] == loc_f$sampling_code)
com_mat_met$loc[i] <- loc_f$location[index_f]
}
}
com_mat_met$sample <- as.factor(com_mat_met$sample)
row.names(com_mat) <- com_mat[, 1]
bc_mat <- vegdist(select(com_mat, !"sampling_code_sample"), binary = FALSE, method = "bray", diag = TRUE)
pcoa <- ape::pcoa(bc_mat)
df.pcoa <- data.frame(pcoa$vectors)
pcoa$values
plot_data <- cbind(com_mat_met, df.pcoa)
x_lab <- round(pcoa$values["Relative_eig"][[1]][1]*100, 2)
y_lab <- round(pcoa$values["Relative_eig"][[1]][2]*100, 2)
z_lab <- round(pcoa$values["Relative_eig"][[1]][3]*100, 2)
#By location only
cols <- c("#0077bb", "#ddaa33", "#009988", "#cc3311")
loc_pcoa <- ggplot(plot_data,aes(x=Axis.1,y=Axis.2, color = loc))+
geom_point(size=2) + theme_bw() +
theme(panel.grid = element_blank(), legend.position = "top", legend.margin=margin(0,0,0,0),
legend.box.margin=margin(0,0,0,0),  legend.title=element_text(size=8),
legend.text=element_text(size=7)) +
labs(x=paste0("PCoA1 (",x_lab,"%)"), y=paste0("PCoA2 (",y_lab,"%)")) +
scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = cols) + labs(color = "Growing region") +
stat_ellipse(type='t', level = 0.95)
#By sample only
sample_pcoa <- ggplot(plot_data,aes(x=Axis.1,y=Axis.2, color = sample))+
geom_point(size=2) + theme_bw() +
theme(panel.grid = element_blank(), legend.position = "top", legend.margin=margin(0,0,0,0),
legend.box.margin=margin(0,0,0,0),  legend.title=element_text(size=8),
legend.text=element_text(size=7)) +
labs(x=paste0("PCoA1 (",x_lab,"%)"), y=paste0("PCoA2 (",y_lab,"%)")) +
scale_shape_manual(values = c(15, 16)) +
scale_color_brewer(palette = "Dark2") + labs(color = "Sample") +
stat_ellipse(type='t', level = 0.95)
pcoa_plot <- ggarrange(loc_pcoa + rremove("ylab") + rremove("xlab"),
sample_pcoa + rremove("ylab") + rremove("xlab"), labels = c("A", "B"))
pcoa_plot <- ggarrange(loc_pcoa + rremove("ylab") + rremove("xlab"),
sample_pcoa + rremove("ylab") + rremove("xlab"), labels = c("A", "B"))
View(pcoa_plot)
pcoa_plot
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Packages-----------------------------------------------
#   Loading packages
library(tidyverse); library(dplyr); library(reshape2); library(vegan); library(ggpubr);
library(phyloseq); library(microbiomeMarker);
genus_data <- read.csv("data/wrangled/genus_assignments.csv", header = TRUE)
fmt <- read.csv("data/raw/fmt_sheet.csv", header = TRUE)
location <- read.csv("data/raw/sample_location_of_origin.csv", header = TRUE)
tax_key <- read.csv("data/raw/tax_key.csv", header =TRUE)
## ----------------------Wrangling----------------------------------------------
#Assigning the previous ID to the isolate
genus_data$isolate <- paste0("FSL ", toupper(genus_data$qseqid))
fmt$FSL <- toupper(fmt$FSL)
data <- merge(genus_data, fmt, by.x = "isolate", by.y = "FSL", all = TRUE)
table(is.na(data$genus))
failed_seq_not_frozen <- data %>%
select(isolate, genus, Previous.ID) %>%
filter(is.na(genus))
data <- data %>%
select(isolate, genus, Previous.ID) %>%
filter(!is.na(genus))
colnames(data)[3] <- "previous_id"
data <- separate(data, previous_id,
into = c("sampling_code", "sample", "sample_rep", "test", "plate_rep", "isolate_number", "mixed_culture_no"),
sep = "-")
data$sampling_code_sample <- paste0(data$sampling_code, "_", data$sample)
pattern <- c("0522B_D22", "0522C_D22", "0622A_D22")
data$sample <- ifelse(data$sampling_code_sample %in% pattern, "D28", data$sample)
data$sampling_code_sample <- paste0(data$sampling_code, "_", data$sample)
data$sampling_code_sample_test <- paste0(data$sampling_code, "_", data$sample, "_", data$test)
#Adding locations to samples
location$sampling_code <- gsub("_", "", location$sampling_code)
loc_h <- filter(location, sample_type != "f")
loc_f <- filter(location, sample_type != "r")
for(i in 1:nrow(data)){
if(data$sample[i] == "H"){
index_h <- which(data$sampling_code[i] == loc_h$sampling_code)
data$loc[i] <- loc_h$location[index_h]
} else {
index_f <- which(data$sampling_code[i] == loc_f$sampling_code)
data$loc[i] <- loc_f$location[index_f]
}
}
#H sample, 0722_B
#Shelf life sample, 0922_B
#H sample, 1222A APC and GN only
#Shelf life sample, 0722_B D7 samples -> Not received, wrong isolates frozen down as belonging to this sample
sample_error <- c("0722B_H_APC", "0722B_H_PC", "0722B_H_GN", "0922B_D7_APC",
"0922B_D7_PC", "0922B_D7_GN", "0922B_D22_APC", "0922B_D22_GN",
"0922B_D22_PC", "1222A_H_APC", "1222A_H_GN",
"0722B_D7_APC", "0722B_D7_GN", "0722B_D7_PC")
data_filt <- data %>%
filter(!(sampling_code_sample_test %in% sample_error))
data_removed <- data %>%
filter(sampling_code_sample_test %in% sample_error)
#Removing 79 isolates that could not be classified at the genus-level
table((data_filt$genus %in% c("Enterobacteriaceae", "Hafniaceae",
"Pectobacteriaeceae", "Micrococcaeae",
"Enterobacterales", "Erwiniaceae",
"Caryophanaceae", "Yersiniaceae")))
n_genus <- data_filt %>%
filter(genus %in% c("Enterobacteriaceae", "Hafniaceae",
"Pectobacteriaeceae", "Micrococcaeae",
"Enterobacterales", "Erwiniaceae",
"Caryophanaceae", "Yersiniaceae"))
data_filt <- data_filt %>%
filter(!(genus %in% c("Enterobacteriaceae", "Hafniaceae",
"Pectobacteriaeceae", "Micrococcaeae",
"Enterobacterales", "Erwiniaceae",
"Caryophanaceae", "Yersiniaceae")))
genera_prop <- data_filt %>%
group_by(genus) %>%
summarize(prop = n()/nrow(data_filt),
count = n()) %>%
mutate(percent = prop*100)
genera_high_freq <- genera_prop %>%
filter(percent > 1)
data_filt$genus_high_freq <- ifelse(data_filt$genus %in% genera_high_freq$genus,
data_filt$genus,
"rare")
data_filt_summary_loc <- data_filt %>%
group_by(loc) %>%
summarize(n = n())
data_filt_summary_samp <- data_filt %>%
group_by(sample) %>%
summarize(n = n())
data_filt_summary_genus <- data_filt %>%
group_by(genus_high_freq) %>%
summarize(n = n())
data_filt_summary_loc_genus <- data_filt %>%
group_by(loc, genus_high_freq) %>%
summarize(n = n())
data_filt_summary_loc_samp_num_isolates <- data_filt %>%
group_by(loc, sample, genus_high_freq) %>%
summarize(n = n())
data_filt_summary_samp_genera <- data_filt %>%
group_by(sample, genus_high_freq) %>%
summarize(n = n())
chisq.test(data_filt$loc, data_filt$genus_high_freq, simulate.p.value = TRUE)$expected
fisher.test(data_filt$loc, data_filt$genus_high_freq, simulate.p.value = TRUE)
chisq.test(data_filt$loc, data_filt$genus_high_freq, simulate.p.value = TRUE)$expected
fisher.test(data_filt$loc, data_filt$genus_high_freq, simulate.p.value = TRUE)
chisq.test(data_filt$loc, data_filt$genus_high_freq, simulate.p.value = TRUE)$expected
fisher.test(data_filt$loc, data_filt$genus_high_freq, simulate.p.value = TRUE)
fisher.test(data_filt$sample, data_filt$genus_high_freq, simulate.p.value = TRUE)
#Samples tested every 7 days
seven_days <- c("0422B", "0522A", "0522B", "0522C", "0622A")
data_filt_2 <- data_filt %>%
filter(!(sampling_code %in% seven_days & sample %in% c("D28"))) %>%
filter(!(loc %in% c("FL", "GA")))
dist_data <- select(data_filt_2, c("genus_high_freq", "sampling_code_sample", "test"))
genus_by_sample <- melt(dist_data, id.vars = c("sampling_code_sample", "genus_high_freq"))
com_mat <- dcast(genus_by_sample, sampling_code_sample ~ genus_high_freq, fun.aggregate = length)
com_mat_met <- separate(com_mat, sampling_code_sample, into = c("sampling_code", "sample"), sep = "_") %>%
select(sampling_code, sample)
row.names(com_mat_met) <- 1:nrow(com_mat_met)
for(i in 1:nrow(com_mat_met)){
if(com_mat_met$sample[i] == "H"){
index_h <- which(com_mat_met$sampling_code[i] == loc_h$sampling_code)
com_mat_met$loc[i] <- loc_h$location[index_h]
} else {
index_f <- which(com_mat_met$sampling_code[i] == loc_f$sampling_code)
com_mat_met$loc[i] <- loc_f$location[index_f]
}
}
com_mat_met$sample <- as.factor(com_mat_met$sample)
row.names(com_mat) <- com_mat[, 1]
bc_mat <- vegdist(select(com_mat, !"sampling_code_sample"), binary = FALSE, method = "bray", diag = TRUE)
pcoa <- ape::pcoa(bc_mat)
df.pcoa <- data.frame(pcoa$vectors)
pcoa$values
plot_data <- cbind(com_mat_met, df.pcoa)
x_lab <- round(pcoa$values["Relative_eig"][[1]][1]*100, 2)
y_lab <- round(pcoa$values["Relative_eig"][[1]][2]*100, 2)
z_lab <- round(pcoa$values["Relative_eig"][[1]][3]*100, 2)
#By location only
cols <- c("#0077bb", "#ddaa33", "#009988", "#cc3311")
loc_pcoa <- ggplot(plot_data,aes(x=Axis.1,y=Axis.2, color = loc))+
geom_point(size=2) + theme_bw() +
theme(panel.grid = element_blank(), legend.position = "top", legend.margin=margin(0,0,0,0),
legend.box.margin=margin(0,0,0,0),  legend.title=element_text(size=8),
legend.text=element_text(size=7)) +
labs(x=paste0("PCoA1 (",x_lab,"%)"), y=paste0("PCoA2 (",y_lab,"%)")) +
scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = cols) + labs(color = "Growing region") +
stat_ellipse(type='t', level = 0.95)
#By sample only
sample_pcoa <- ggplot(plot_data,aes(x=Axis.1,y=Axis.2, color = sample))+
geom_point(size=2) + theme_bw() +
theme(panel.grid = element_blank(), legend.position = "top", legend.margin=margin(0,0,0,0),
legend.box.margin=margin(0,0,0,0),  legend.title=element_text(size=8),
legend.text=element_text(size=7)) +
labs(x=paste0("PCoA1 (",x_lab,"%)"), y=paste0("PCoA2 (",y_lab,"%)")) +
scale_shape_manual(values = c(15, 16)) +
scale_color_brewer(palette = "Dark2") + labs(color = "Sample") +
stat_ellipse(type='t', level = 0.95)
pcoa_plot <- ggarrange(loc_pcoa + rremove("ylab") + rremove("xlab"),
sample_pcoa + rremove("ylab") + rremove("xlab"), labels = c("A", "B"))
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
pcoa_plot
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
set.seed(1)
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
set.seed(1)
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
set.seed(2)
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
set.seed(1)
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
set.seed(1)
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
## ----------------------Analysis-----------------------------------------------
set.seed(1)
perm_an <- adonis2(bc_mat ~ sample + loc + loc : sample,
data = com_mat_met, permutations = 999, by = "terms")
perm_an
